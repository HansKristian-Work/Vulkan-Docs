include::{generated}/meta//VK_EXT_custom_border_color.txt[]

*Last Modified Date*::
    2019-10-11
*IP Status*::
    No known IP claims.
*Contributors*::
  - Joshua Ashton
  - Liam Middlebrook, Nvidia

This extension provides cross-vendor functionality to specify a custom border color
for use when the sampler address mode ename:VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER is used.

To create a sampler which uses a custom border color
slink:VkSamplerCreateInfo::pname:borderColor must be set to ename:VK_BORDER_COLOR_CUSTOM_EXT.

When ename:VK_BORDER_COLOR_CUSTOM_EXT is supplied, applications must provide a
slink:VkSamplerCustomBorderColorCreateInfoEXT in the pNext chain for
slink:VkSamplerCreateInfo.

=== New Enum Constants

  * Extending elink:VkStructureType:
  ** ename:VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT

  * Extending elink:VkBorderColor:
  ** ename:VK_BORDER_COLOR_CUSTOM_EXT

=== New Structures

  * slink:VkSamplerCustomBorderColorCreateInfoEXT

=== New Functions

=== Issues

1) Should VkClearColorValue be used for the border color value, or should we
have our own struct/union?
Do we need to specify the type of the input values for the components? This is
more of a concern if VkClearColorValue is used here because it provides a union
of float,int,uint types.

OPEN

2) For hardware which supports a limited number of border colors what happens if
that number is exceed? Should this be handled by the driver unbeknownst to the
application. In Revision 1 we had solved this issue using a new Object type,
however that may have lead to additional system resource consumption which would
otherwise not be required.

OPEN

=== Version History

  * Revision 1, 2019-10-10 (Joshua Ashton)
    - Internal revisions.

  * Revision 2, 2019-10-11 (Liam Middlebrook)
    - Remove VkCustomBorderColor object and associated functions
    - Add issues concerning HW limitations for custom border color count
